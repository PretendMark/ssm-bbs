<?xml version="1.0" encoding="utf-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!-- =============================================Shiro======================================================= -->
    <!-- Shiro核心安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- 缓存管理 -->
        <property name="cacheManager" ref="cacheManager" />
        <!-- 验证策略 -->
        <property name="authenticator" ref="authenticator"></property>
        <!-- 验证方式<传入的是一个realms的集合> -->
        <property name="realms">
            <list>
                <ref bean="md5Realm" />
                <ref bean="sha1Realm" />
            </list>
        </property>
    </bean>
    <!--  配置 CacheManager. 需要加入 ehcache 的 jar 包及配置文件. -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml" />
    </bean>
    <!-- 一个Realm成功就验证成功 返回所有认证信息 类： AtLeastOneSuccessfulStrategy -->
    <!-- 一个Realm成功就验证成功 返回第一个验证信息，其他忽略 类：FirstSuccessfulStrategy-->
    <!-- 全部Realm成功才验证成功 -->
    <bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
        <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.AllSuccessfulStrategy"></bean>
        </property>
    </bean>
    <!-- MD5加密1024次 -->
    <bean id="md5Realm" class="com.fly.web.realm.Md5Realm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="MD5"></property>
                <property name="hashIterations" value="1024"></property>
            </bean>
        </property>
    </bean>
    <!-- SHA1加密1024次 -->
    <bean id="sha1Realm" class="com.fly.web.realm.Sha1Realm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="SHA1"></property>
                <property name="hashIterations" value="1024"></property>
            </bean>
        </property>
    </bean>
    <!-- 4. 配置 LifecycleBeanPostProcessor. 可以自定的来调用配置在 Spring IOC 容器中 shiro
        bean 的生命周期方法. -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
    <!-- 5. 启用 IOC 容器中使用 shiro 的注解. 但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用. -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor" />
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager" />
    </bean>
    <!-- 配置 ShiroFilter. id 必须和 web.xml 文件中配置的 DelegatingFilterProxy
        的 <filter-name> 一致. 若不一致, 则会抛出: NoSuchBeanDefinitionException. 因为 Shiro 会来
        IOC 容器中查找和 <filter-name> 名字对应的 filter bean. -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager" />
        <property name="loginUrl" value="/asset/user/public/login.jsp" />
        <property name="successUrl" value="/asset/user/private/index.jsp" />
        <property name="unauthorizedUrl" value="/unauthorized.jsp" />
        <!-- <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"></property> -->
        <!--
        配置哪些页面需要受保护. 以及访问这些页面需要的权限.
        1). anon 可以被匿名访问（anonymity）
        2). authc 必须认证(即登录)后才可能访问的页面.
        3). logout 登出.
        4). roles 角色过滤器 优先级从上到下访问
        -->
        <property name="filterChainDefinitions">
            <value>
                /asset/user/public/* = anon
                /ureg/** = anon
                /ulogin/** = anon
                /kaptcha.jpg = anon
                /test.jsp = anon
                /test/** = anon
                /index.jsp = anon
                /asset/user/reg.jsp = anon
                /asset/res/** = anon
                /verifyCode/** = anon
                # everything else requires authentication:
                /** = authc
            </value>
        </property>
    </bean>
    <!-- 配置一个 bean, 该 bean 实际上是一个 Map. 通过实例工厂方法的方式 -->
    <!-- <bean id="filterChainDefinitionMap" factory-bean="filterChainDefinitionMapBuilder"
        factory-method="buildFilterChainDefinitionMap"></bean> <bean id="filterChainDefinitionMapBuilder"
        class="com.atguigu.shiro.factory.FilterChainDefinitionMapBuilder"></bean>
        <bean id="shiroService" class="com.atguigu.shiro.services.ShiroService"></bean> -->
</beans>